@page "/optimizer"
@using OptiQ.QuantumCore
@using OptiQ.BlazorUI.Services
@inject OptiQApiService ApiService
@inject ILogger<Optimizer> Logger

<div class="min-h-screen bg-gradient-to-br from-blue-950 via-purple-900 to-black">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="text-center mb-12 animate-fade-in">
            <h1 class="text-6xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent mb-4">
                OptiQ
            </h1>
            <p class="text-xl text-gray-300 mb-2">Quantum-Powered Portfolio Optimization</p>
            <p class="text-sm text-gray-400">Using QAOA (Quantum Approximate Optimization Algorithm)</p>
            <div class="flex justify-center items-center gap-2 mt-4">
                <span class="@(_isApiHealthy ? "text-green-400" : "text-red-400")">
                    @(_isApiHealthy ? "üü¢ API Connected" : "üî¥ API Disconnected")
                </span>
            </div>
        </div>

        <div class="grid grid-cols-1 xl:grid-cols-3 gap-8">
            <!-- Input Panel -->
            <div class="xl:col-span-1 space-y-6">
                <!-- Portfolio Data Card -->
                <div class="bg-gray-800/50 backdrop-blur-md rounded-xl p-6 border border-gray-700 shadow-xl">
                    <h2 class="text-2xl font-semibold text-white mb-4 flex items-center gap-2">
                        <span class="text-blue-400">üìä</span> Portfolio Data
                    </h2>
                    
                    <div class="space-y-4">
                        <button @onclick="LoadSampleData" 
                                class="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-all transform hover:scale-105 disabled:opacity-50"
                                disabled="@_isOptimizing">
                            üé≤ Load Sample Data
                        </button>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-300 text-sm font-medium mb-1">Budget ($)</label>
                                <input @bind="_portfolioData.Budget" 
                                       type="number" 
                                       class="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"/>
                            </div>
                            <div>
                                <label class="block text-gray-300 text-sm font-medium mb-1">Risk Tolerance</label>
                                <input @bind="_portfolioData.RiskTolerance" 
                                       type="number" 
                                       step="0.1" 
                                       class="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"/>
                            </div>
                        </div>

                        @if (_portfolioData.AssetNames?.Length > 0)
                        {
                            <div class="bg-gray-700/30 rounded-lg p-4">
                                <h3 class="text-lg font-medium text-white mb-3">Assets</h3>
                                <div class="space-y-2 max-h-32 overflow-y-auto">
                                    @for (int i = 0; i < _portfolioData.AssetNames.Length; i++)
                                    {
                                        var index = i;
                                        <div class="flex justify-between items-center text-sm">
                                            <span class="text-gray-300">@_portfolioData.AssetNames[index]</span>
                                            <span class="text-green-400">@($"{_portfolioData.AssetReturns[index]:P2}")</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- QAOA Parameters Card -->
                <div class="bg-gray-800/50 backdrop-blur-md rounded-xl p-6 border border-gray-700 shadow-xl">
                    <h2 class="text-2xl font-semibold text-white mb-4 flex items-center gap-2">
                        <span class="text-purple-400">‚öõÔ∏è</span> QAOA Parameters
                    </h2>
                    
                    <div class="space-y-4">
                        <button @onclick="LoadRandomParameters" 
                                class="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-2 px-4 rounded-lg transition-all transform hover:scale-105 disabled:opacity-50"
                                disabled="@_isOptimizing">
                            üé∞ Generate Random Parameters
                        </button>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-300 text-sm font-medium mb-1">Layers</label>
                                <input @bind="_qaoaParameters.Layers" 
                                       type="number" 
                                       min="1" 
                                       max="10" 
                                       class="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"/>
                            </div>
                            <div>
                                <label class="block text-gray-300 text-sm font-medium mb-1">Samples</label>
                                <input @bind="_qaoaParameters.Samples" 
                                       type="number" 
                                       min="10" 
                                       max="10000" 
                                       class="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-3 py-2 text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"/>
                            </div>
                        </div>

                        @if (_qaoaParameters.BetaAngles?.Length > 0)
                        {
                            <div class="bg-gray-700/30 rounded-lg p-4">
                                <h3 class="text-lg font-medium text-white mb-3">Quantum Parameters</h3>
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">Beta angles:</span>
                                        <span class="text-blue-400">@(_qaoaParameters.BetaAngles.Length) values</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">Gamma angles:</span>
                                        <span class="text-purple-400">@(_qaoaParameters.GammaAngles.Length) values</span>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Optimize Button -->
                        <button @onclick="OptimizePortfolio" 
                                class="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed text-lg"
                                disabled="@(_isOptimizing || !_canOptimize)">
                            @if (_isOptimizing)
                            {
                                <span class="flex items-center justify-center gap-2">
                                    <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                                    Optimizing...
                                </span>
                            }
                            else
                            {
                                <span class="flex items-center justify-center gap-2">
                                    <span>üöÄ</span> Optimize Portfolio
                                </span>
                            }
                        </button>
                    </div>
                </div>
            </div>

            <!-- Results Panel -->
            <div class="xl:col-span-2 space-y-6">
                @if (_optimizationResult != null)
                {
                    <!-- Results Summary -->
                    <div class="bg-gray-800/50 backdrop-blur-md rounded-xl p-6 border border-gray-700 shadow-xl animate-slide-up">
                        <h2 class="text-2xl font-semibold text-white mb-4 flex items-center gap-2">
                            <span class="text-green-400">‚ú®</span> Optimization Results
                        </h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                            <div class="bg-gradient-to-br from-green-600/20 to-green-400/20 p-4 rounded-lg border border-green-500/30">
                                <div class="text-green-400 text-sm font-medium">Expected Return</div>
                                <div class="text-2xl font-bold text-white">@($"{_optimizationResult.ExpectedReturn:P2}")</div>
                            </div>
                            <div class="bg-gradient-to-br from-red-600/20 to-red-400/20 p-4 rounded-lg border border-red-500/30">
                                <div class="text-red-400 text-sm font-medium">Portfolio Risk</div>
                                <div class="text-2xl font-bold text-white">@($"{_optimizationResult.Risk:F4}")</div>
                            </div>
                            <div class="bg-gradient-to-br from-blue-600/20 to-blue-400/20 p-4 rounded-lg border border-blue-500/30">
                                <div class="text-blue-400 text-sm font-medium">Cost Function</div>
                                <div class="text-2xl font-bold text-white">@($"{_optimizationResult.Cost:F4}")</div>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Selected Assets -->
                            <div class="bg-gray-700/30 rounded-lg p-4">
                                <h3 class="text-lg font-medium text-white mb-3">Selected Assets</h3>
                                <div class="space-y-2">
                                    @foreach (var asset in _optimizationResult.SelectedAssets)
                                    {
                                        <div class="flex items-center gap-2">
                                            <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                                            <span class="text-gray-300">@asset</span>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Optimization Info -->
                            <div class="bg-gray-700/30 rounded-lg p-4">
                                <h3 class="text-lg font-medium text-white mb-3">Optimization Details</h3>
                                <div class="space-y-2 text-sm">
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">Samples:</span>
                                        <span class="text-white">@_optimizationResult.SampleCount</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">Status:</span>
                                        <span class="text-green-400">@_optimizationResult.Status</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-300">Time:</span>
                                        <span class="text-white">@_optimizationResult.OptimizationTime.ToString("HH:mm:ss")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Asset Details -->
                    <div class="bg-gray-800/50 backdrop-blur-md rounded-xl p-6 border border-gray-700 shadow-xl">
                        <h3 class="text-xl font-semibold text-white mb-4">Asset Analysis</h3>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="border-b border-gray-600">
                                        <th class="text-left py-2 px-4 text-gray-300">Asset</th>
                                        <th class="text-left py-2 px-4 text-gray-300">Expected Return</th>
                                        <th class="text-left py-2 px-4 text-gray-300">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < _portfolioData.AssetNames.Length; i++)
                                    {
                                        var asset = _portfolioData.AssetNames[i];
                                        var isSelected = _optimizationResult?.SelectedAssets?.Contains(asset) ?? false;
                                        <tr class="@(isSelected ? "bg-green-500/10" : "")">
                                            <td class="py-2 px-4 text-white font-medium">@asset</td>
                                            <td class="py-2 px-4 text-gray-300">@($"{_portfolioData.AssetReturns[i]:P2}")</td>
                                            <td class="py-2 px-4">
                                                @if (isSelected)
                                                {
                                                    <span class="text-green-400 font-medium">‚úì Selected</span>
                                                }
                                                else
                                                {
                                                    <span class="text-gray-500">Not Selected</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Welcome Message -->
                    <div class="bg-gray-800/50 backdrop-blur-md rounded-xl p-12 border border-gray-700 shadow-xl text-center">
                        <div class="text-6xl mb-4">‚öõÔ∏è</div>
                        <h2 class="text-3xl font-bold text-white mb-4">Welcome to OptiQ</h2>
                        <p class="text-gray-300 text-lg mb-6">
                            Experience the power of quantum computing for portfolio optimization.
                            Load sample data and run the QAOA algorithm to find the optimal asset allocation.
                        </p>
                        <div class="flex flex-wrap justify-center gap-4 text-sm text-gray-400">
                            <span class="bg-gray-700/50 px-3 py-1 rounded-full">üî¨ Quantum Algorithms</span>
                            <span class="bg-gray-700/50 px-3 py-1 rounded-full">üìä Modern Portfolio Theory</span>
                            <span class="bg-gray-700/50 px-3 py-1 rounded-full">‚ö° Real-time Optimization</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .animate-fade-in {
        animation: fadeIn 1s ease-in;
    }
    
    .animate-slide-up {
        animation: slideUp 0.5s ease-out;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @@keyframes slideUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .bg-clip-text {
        -webkit-background-clip: text;
        background-clip: text;
    }
</style>

@code {
    private PortfolioDataDto _portfolioData = new();
    private QAOAParametersDto _qaoaParameters = new() { Layers = 2, Samples = 100 };
    private PortfolioOptimizationResponse? _optimizationResult;
    private bool _isOptimizing = false;
    private bool _isApiHealthy = false;

    private bool _canOptimize => 
        _portfolioData.AssetNames?.Length > 0 && 
        _qaoaParameters.BetaAngles?.Length > 0 && 
        _qaoaParameters.GammaAngles?.Length > 0 &&
        !_isOptimizing;

    protected override async Task OnInitializedAsync()
    {
        await CheckApiHealth();
        await LoadSampleData();
        await LoadRandomParameters();
    }

    private async Task CheckApiHealth()
    {
        _isApiHealthy = await ApiService.CheckApiHealthAsync();
        StateHasChanged();
    }

    private async Task LoadSampleData()
    {
        try
        {
            var sampleData = await ApiService.GetSamplePortfolioAsync();
            if (sampleData != null)
            {
                _portfolioData = sampleData;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading sample data");
        }
    }

    private async Task LoadRandomParameters()
    {
        try
        {
            var parameters = await ApiService.GetRandomParametersAsync(_qaoaParameters.Layers, _qaoaParameters.Samples);
            if (parameters != null)
            {
                _qaoaParameters = parameters;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading random parameters");
        }
    }

    private async Task OptimizePortfolio()
    {
        if (!_canOptimize) return;

        _isOptimizing = true;
        StateHasChanged();

        try
        {
            var result = await ApiService.OptimizePortfolioAsync(_portfolioData, _qaoaParameters);
            if (result != null)
            {
                _optimizationResult = result;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during optimization");
        }
        finally
        {
            _isOptimizing = false;
            StateHasChanged();
        }
    }
}
